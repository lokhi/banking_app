require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/cards", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Card. As you add validations to Card, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {:wallet_id => FactoryBot.create(:company2_wallet_EUR).id}
  }

  let(:invalid_attributes) {
    {:wallet_id => 99}
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # CardsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {:"Company-Id" => 2, :"User-Id" => 3}
  }
  let(:invalid_headers) {
    {:"Company-Id" => 3, :"User-Id" => 4}
  }

  describe "GET /index" do
    it "renders a successful response" do
      card = FactoryBot.create(:card)
      get v1_cards_url, headers: valid_headers, as: :json
      expect(response).to be_successful
      expect(JSON.parse(response.body).size).to eq(1)
    end
  end


  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Card" do
        expect {
          post v1_cards_url,
               params: { card: valid_attributes }, headers: valid_headers, as: :json
        }.to change(Card, :count).by(1)
      end

      it "renders a JSON response with the new card" do
        post v1_cards_url,
             params: { card: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json; charset=utf-8"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Card" do
        expect {
          post v1_cards_url,
               params: { card: invalid_attributes }, as: :json
        }.to change(Card, :count).by(0)
      end

      it "renders a JSON response with errors for the new card" do
        post v1_cards_url,
             params: { card: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq("application/json; charset=utf-8")
      end
    end
  end

  describe "PATCH /card/:id/load" do
    context "with valid amount" do
      it "should load the card" do
          card = FactoryBot.create(:card)
          patch v1_load_card_url(card),
               params: { amount: 50 }, headers: valid_headers, as: :json
          card.reload
          expect(card.current_balance).to eq(150.00)
      end
      it "should unload the wallet" do
          card = FactoryBot.create(:card)
          patch v1_load_card_url(card),
               params: { amount: 50 }, headers: valid_headers, as: :json
          card.reload
          expect(card.wallet.current_balance).to eq(50.00)
      end
      it "should create a transfer" do
          card = FactoryBot.create(:card)
          expect {
            patch v1_load_card_url(card),
                 params: { amount: 50 }, headers: valid_headers, as: :json
          }.to change(Transfer, :count).by(1)
      end

    end

    context "with invalid amount" do
      it "does not load the Card" do
        card = FactoryBot.create(:card)

        patch v1_load_card_url(card),
             params: { amount: 500 }, headers: valid_headers, as: :json
        expect(card.current_balance).to eq(100.00)
      end

      it "does not unload the wallet" do
        card = FactoryBot.create(:card)

        patch v1_load_card_url(card),
             params: { amount: 500 }, headers: valid_headers, as: :json
        expect(card.wallet.current_balance).to eq(100.00)
      end
      it "should not create a transfer" do
          card = FactoryBot.create(:card)
          expect {
            patch v1_load_card_url(card),
                 params: { amount: 500 }, headers: valid_headers, as: :json
          }.to change(Transfer, :count).by(0)
      end

    end


    context "with invalid header" do
      it "should render 403" do
        card = FactoryBot.create(:card)

        patch v1_load_card_url(card),
             params: { amount: 50 }, headers: invalid_headers, as: :json
        expect(response.status).to eq(403)
      end
    end
  end


  describe "PATCH /card/:id/unload" do
    context "with valid amount" do
      it "should unload the card" do
          card = FactoryBot.create(:card)
          patch v1_unload_card_url(card),
               params: { amount: 50 }, headers: valid_headers, as: :json
          card.reload
          expect(card.current_balance).to eq(50.00)
      end
      it "should load the wallet" do
          card = FactoryBot.create(:card)
          patch v1_unload_card_url(card),
               params: { amount: 50 }, headers: valid_headers, as: :json
          card.reload
          expect(card.wallet.current_balance).to eq(150.00)
      end
      it "should create a transfer" do
          card = FactoryBot.create(:card)
          expect {
            patch v1_unload_card_url(card),
                 params: { amount: 50 }, headers: valid_headers, as: :json
          }.to change(Transfer, :count).by(1)
      end

    end

    context "with invalid amount" do
      it "does not load the Card" do
        card = FactoryBot.create(:card)

        patch v1_unload_card_url(card),
             params: { amount: 500 }, headers: valid_headers, as: :json
        expect(card.current_balance).to eq(100.00)
      end
      it "it should return 422" do
        card = FactoryBot.create(:card)

        patch v1_unload_card_url(card),
             params: { amount: "abc" }, headers: valid_headers, as: :json
        expect(response.status).to eq(422)
      end
    end

    context "with invalid header" do
      it "should render 403" do
        card = FactoryBot.create(:card)

        patch v1_unload_card_url(card),
             params: { amount: 500 }, headers: invalid_headers, as: :json
        expect(response.status).to eq(403)
      end
    end
  end





  describe "PATCH /card/:id/lock" do
    context "lock card" do
      it "should unload the card" do
          card = FactoryBot.create(:card)
          patch v1_lock_card_url(card),
               params: { }, headers: valid_headers, as: :json
          card.reload
          expect(card.current_balance).to eq(0.00)
      end
      it "should load the wallet" do
          card = FactoryBot.create(:card)
          patch v1_lock_card_url(card),
               params: {  }, headers: valid_headers, as: :json
          card.reload
          expect(card.wallet.current_balance).to eq(200.00)
      end
      it "should create a transfer" do
          card = FactoryBot.create(:card)
          expect {
            patch v1_lock_card_url(card),
                 params: {  }, headers: valid_headers, as: :json
          }.to change(Transfer, :count).by(1)
      end
      it "should lock the card" do
          card = FactoryBot.create(:card)
          patch v1_lock_card_url(card),
               params: { }, headers: valid_headers, as: :json
          card.reload
          expect(card.status).to eq(0)
      end
    end


    context "with invalid header" do
      it "should render 403" do
        card = FactoryBot.create(:card)
        patch v1_lock_card_url(card),
             params: { }, headers: invalid_headers, as: :json
        expect(response.status).to eq(403)
      end
    end
  end

  describe "PATCH /card/:id/unlock" do
    context "unlock card" do
      it "should unlock the card" do
          card = FactoryBot.create(:card)
          patch v1_unlock_card_url(card),
               params: {}, headers: valid_headers, as: :json
          card.reload
          expect(card.status).to eq(1)
      end
    end

    context "with invalid header" do
      it "should render 403" do
        card = FactoryBot.create(:card)
        patch v1_unlock_card_url(card),
             params: {}, headers: invalid_headers, as: :json
        expect(response.status).to eq(403)
      end
    end
  end

end
