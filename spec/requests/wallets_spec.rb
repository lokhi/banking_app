require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/wallets", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Wallet. As you add validations to Wallet, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {:current_balance => 100.00,:currency => "EUR", :master => false}
  }

  let(:invalid_attributes) {
      {:current_balance => -100.00,:currency => "YXZ", :master => false}
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # WalletsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {:"Company-Id" => 2, :"User-Id" => 3}
  }

  let(:invalid_headers) {
    {:"Company-Id" => 3, :"User-Id" => 4}
  }

  let(:json_response) {
    File.open("./spec/fixer.json")
  }

  let(:url_stub) {
    "http://data.fixer.io/api/latest?access_key=#{ENV["FIXER_KEY_API"]}&base=&symbols=USD"
  }

  describe "GET /index" do
    it "renders a successful response" do
      master_wallet_EUR = FactoryBot.create(:master_wallet_EUR)
      master_wallet_USD = FactoryBot.create(:master_wallet_USD)
      master_wallet_GBP = FactoryBot.create(:master_wallet_GBP)
      company2_wallet_EUR = FactoryBot.create(:company2_wallet_EUR)

      get v1_wallets_url, headers: valid_headers, as: :json
      expect(response).to be_successful
      expect(JSON.parse(response.body).size).to eq(1)
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Wallet" do
        expect {
          post v1_wallets_url,
               params: { wallet: valid_attributes }, headers: valid_headers, as: :json
        }.to change(Wallet, :count).by(1)
      end

      it "renders a JSON response with the new wallet" do
        post v1_wallets_url,
             params: { wallet: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json; charset=utf-8"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Wallet" do
        expect {
          post v1_wallets_url,
               params: { wallet: invalid_attributes }, as: :json
        }.to change(Wallet, :count).by(0)
      end

      it "renders a JSON response with errors for the new wallet" do
        post v1_wallets_url,
             params: { wallet: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq("application/json; charset=utf-8")
      end
    end
  end

  describe "PATCH /wallets/:origin_wallet/to/:target_wallet" do
    context "with valid parameters" do
      it "should unload the origin wallet" do
          stub_request(:get, url_stub ).to_return(status: 200,body: json_response,  headers: {"Content-Type" => "application/json"})
          origin_wallet = FactoryBot.create(:company2_wallet_EUR)
          target_wallet = FactoryBot.create(:company2_wallet_USD)
          master_wallet_USD = FactoryBot.create(:master_wallet_USD)
          patch v1_transfer_wallet_url(origin_wallet,target_wallet),
               params: { amount: 50 }, headers: valid_headers, as: :json
          origin_wallet.reload
          expect(origin_wallet.current_balance).to eq(50.00)
      end

      it "should load the target wallet" do
          stub_request(:get, url_stub).to_return(status: 200,body: json_response,  headers: {"Content-Type" => "application/json"})
          origin_wallet = FactoryBot.create(:company2_wallet_EUR)
          target_wallet = FactoryBot.create(:company2_wallet_USD)
          master_wallet_USD = FactoryBot.create(:master_wallet_USD)
          patch v1_transfer_wallet_url(origin_wallet,target_wallet),
               params: { amount: 50 }, headers: valid_headers, as: :json
          target_wallet.reload
          expect(target_wallet.current_balance).to eq(157.48)
      end

      it "should load a master wallet with fee" do
          stub_request(:get, url_stub).to_return(status: 200,body: json_response,  headers: {"Content-Type" => "application/json"})
          origin_wallet = FactoryBot.create(:company2_wallet_EUR)
          target_wallet = FactoryBot.create(:company2_wallet_USD)
          master_wallet_USD = FactoryBot.create(:master_wallet_USD)
          patch v1_transfer_wallet_url(origin_wallet,target_wallet),
               params: { amount: 50 }, headers: valid_headers, as: :json
          master_wallet_USD.reload
          expect(master_wallet_USD.current_balance).to eq(1.72)
      end
    end

    context "with unvalid parameters" do
      it "should return a 422" do
          stub_request(:get, url_stub ).to_return(status: 200,body: json_response,  headers: {"Content-Type" => "application/json"})
          origin_wallet = FactoryBot.create(:company2_wallet_EUR)
          target_wallet = FactoryBot.create(:company2_wallet_USD)
          master_wallet_USD = FactoryBot.create(:master_wallet_USD)
          patch v1_transfer_wallet_url(origin_wallet,target_wallet),
               params: { amount: 500 }, headers: valid_headers, as: :json
          expect(response.status).to eq(422)
      end
      it "should not unload the origin wallet" do
          stub_request(:get, url_stub ).to_return(status: 200,body: json_response,  headers: {"Content-Type" => "application/json"})
          origin_wallet = FactoryBot.create(:company2_wallet_EUR)
          target_wallet = FactoryBot.create(:company2_wallet_USD)
          master_wallet_USD = FactoryBot.create(:master_wallet_USD)
          patch v1_transfer_wallet_url(origin_wallet,target_wallet),
               params: { amount: 500 }, headers: valid_headers, as: :json
          origin_wallet.reload
          expect(origin_wallet.current_balance).to eq(100.00)
      end

      it "should not load the target wallet" do
          stub_request(:get, url_stub).to_return(status: 200,body: json_response,  headers: {"Content-Type" => "application/json"})
          origin_wallet = FactoryBot.create(:company2_wallet_EUR)
          target_wallet = FactoryBot.create(:company2_wallet_USD)
          master_wallet_USD = FactoryBot.create(:master_wallet_USD)
          patch v1_transfer_wallet_url(origin_wallet,target_wallet),
               params: { amount: 500 }, headers: valid_headers, as: :json
          target_wallet.reload
          expect(target_wallet.current_balance).to eq(100.00)
      end

      it "should not load a master wallet with fee" do
          stub_request(:get, url_stub).to_return(status: 200,body: json_response,  headers: {"Content-Type" => "application/json"})
          origin_wallet = FactoryBot.create(:company2_wallet_EUR)
          target_wallet = FactoryBot.create(:company2_wallet_USD)
          master_wallet_USD = FactoryBot.create(:master_wallet_USD)
          patch v1_transfer_wallet_url(origin_wallet,target_wallet),
               params: { amount: 500 }, headers: valid_headers, as: :json
          master_wallet_USD.reload
          expect(master_wallet_USD.current_balance).to eq(0.00)
      end
    end
    context "with invalid header" do
      it "should return a 403" do
          stub_request(:get, url_stub ).to_return(status: 200,body: json_response,  headers: {"Content-Type" => "application/json"})
          origin_wallet = FactoryBot.create(:company2_wallet_EUR)
          target_wallet = FactoryBot.create(:company2_wallet_USD)
          master_wallet_USD = FactoryBot.create(:master_wallet_USD)
          patch v1_transfer_wallet_url(origin_wallet,target_wallet),
               params: { amount: 50 }, headers: invalid_headers, as: :json
          expect(response.status).to eq(403)
      end
    end

    context "with invalid wallet" do
      it "should return a 403" do
          stub_request(:get, url_stub ).to_return(status: 200,body: json_response,  headers: {"Content-Type" => "application/json"})
          origin_wallet = FactoryBot.create(:company2_wallet_EUR)
          target_wallet = FactoryBot.create(:company3_wallet_USD)
          master_wallet_USD = FactoryBot.create(:master_wallet_USD)
          patch v1_transfer_wallet_url(origin_wallet,target_wallet),
               params: { amount: 50 }, headers: valid_headers, as: :json
          expect(response.status).to eq(403)
      end
    end
  end

end
